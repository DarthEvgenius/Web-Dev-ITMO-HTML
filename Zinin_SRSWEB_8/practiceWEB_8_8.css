* {
	/*обнуляем все отступы*/
	padding: 0;
	margin: 0;
}

body {
	/*а вот это интересно! Эффект перспективы для дочерних элементов! Как бы точка схождения в 900 пикселях от экрана!?*/
	perspective: 900px;
	/*тоже точка схождения, но теперь определяем её x-y координаты*/
	perspective-origin: center -5em;
}

.container {
	/*задаём: ширину, высоту, позиционирование и смещение относительно своего места положения*/
	width: 200px;
	height: 200px;
	position: relative;
	/*задал чуть дольшие отступы, чтобы куб не заезжал за границу браузера при вращении*/
	top: 200px;
	left: 350px;
	/*указываем, что дочерние элементы сохранят 3-д отображение*/
	transform-style: preserve-3d;
	/*создаём анимацию поворота 10сек длительность постоянная линейная*/
	animation: rotate 10s infinite linear;
}

@keyframes rotate {
	/*описываем анимацию в 3д по осям x y z, и задаём угол вращения*/
	100% {
		/*я поставил вращение по всем осям, чтобы рассмотреть все картинки*/
		transform: rotate3d(1, 1, 1, 360deg);
	}
}

div.side {
	/*ширина, высота, цвет фона, позиционирование, граница, отступ границы, прозрачность*/
	width: 200px;
	height: 200px;
	/*ставим именно цвет, ибо потом будет картинка*/
	background-color: #ccc;
	/*из-за абсолютного позиционирования все дивы сваливаются в одну кучу. Но, зато их мы потом расставим в куб!*/
	position: absolute;
	outline: 1px solid #000;
	outline-offset: 25px;
	opacity: 0.8;
}

.front {
	/*ставим картинку фоном для фронтальной грани куба*/
	background: url("images/pic6.png"); /* интересно, что её не видно, пока не выставить значчения для всех элементов, картинку тупо перекрывают. Но если поставить z-index, то она становится видной! */
	/*z-index: 2;*/
}

.left {
	/*сдвигаем див влево, потом поворачиваем поперёк (поворачиваем относительно вертикали) и сдвигаем ещё раз вправо - уже в новой плоскости, чтобы он соприкоснулся углом */
	transform: translateX(-100px) rotateY(90deg) translateX(100px);
	/*ставим фоном картинку*/
	background: url("images/pic1.png");	
}

.right {
	/*правую картинку сдвигаем вправо, ставим поперёк (крутим по оси у) и ещё раз вправо*/
	transform: translateX(100px) rotateY(90deg) translateX(100px);
	background: url("images/pic2.png");
}

.up {
	/*тут сначала поднимаем, поворачиваем уже относительно горизонтальной линии, и сдвигаем от себя (а это, как выяснилось, отрицательное значение)*/
	transform: translateY(-100px) rotateX(90deg) translateY(-100px);
	background: url("images/pic3.png");
}

.down {
	/*аналогично предыдущей, но первым действием сдвигаем вниз, потом поворачиваем и задвигаем*/
	transform: translateY(100px) rotateX(90deg) translateY(-100px);
	background: url("images/pic4.png");
}

.back {
	/*и самое интересное - просто сдвигаем последнюю грань по оси z назад на 200 пикселей! Куб готов!*/
	transform: translateZ(-200px);
	background: url("images/pic5.png");
}